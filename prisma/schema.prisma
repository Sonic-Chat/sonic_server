// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum FriendStatus {
  REQUESTED
  ACCEPTED
  IGNORED
}

enum MessageType {
  TEXT
  IMAGE
  IMAGE_TEXT
}

model Credentials {
  id           String   @id() @default(uuid())
  firebaseId   String   @unique() @map("firebase_id")
  username     String   @unique()
  emailAddress String   @unique @map("email_address")
  password     String
  account      Account?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt() @map("updated_at")

  token Token?

  @@unique([id, firebaseId, emailAddress])
  @@fulltext([username])
  @@map("credentials")
}

model Account {
  id        String   @id() @default(uuid())
  imageUrl  String?  @map("image_url") @db.LongText()
  fullName  String   @map("full_name")
  status    String   @default("")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  credentials   Credentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
  credentialsId String      @unique() @map("credentials_id")

  requests Friends[]
  friends  Friends[] @relation("friends")

  messages Message[]

  chats Chat[] @relation("account_messages")

  @@fulltext([fullName])
  @@map("accounts")
}

model Friends {
  id            String       @id() @default(uuid())
  status        FriendStatus @default(REQUESTED)
  requestedById String       @map("requested_by_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt() @map("updated_at")

  requestedBy Account @relation(fields: [requestedById], references: [id], onDelete: Cascade)

  accounts Account[] @relation("friends")


  @@map("friends")
}

model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  participants Account[] @relation("account_messages")
  messages     Message[]

  @@map("chats")
}

model Message {
  id        String      @id() @default(uuid())
  type      MessageType @default(TEXT)
  message   String?
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt() @map("updated_at")

  sentBy   Account @relation(fields: [sentById], references: [id], onDelete: Cascade)
  sentById String  @map("sent_by_id")

  image   Image?  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String? @map("image_id")

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @map("chat_id")
  @@map("messages")
}

model Image {
  id         String   @id() @default(uuid())
  firebaseId String   @unique() @map("firebase_id")
  imageUrl   String   @map("image_url")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt() @map("updated_at")

  messages Message[]

  @@map("images")
}

model Token {
  id        String   @id() @default(uuid())
  token     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  credentials   Credentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
  credentialsId String      @unique() @map("credentials_id")

  @@map("tokens")
}
